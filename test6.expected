open misc
open util/integer

pred true { no none }
pred false { some none }

one sig State {
 x : Int
}

one sig Const {
 X : Int
}

pred obligation {
(State.x = Const.X) => {
(true or true)
(true => (State.x.negate).(abs) = (Const.X).(abs))
(true => (State.x).(abs) = (Const.X).(abs))
}
}

check { obligation }
