
- create a java module 
- we need to deal with counterexamples that occur because of overflows. when alloy's latest version comes out we can use the 'no overflow' feature. should we do something else in the meantime?
- should we check for a particular alloy version?
- how can we translate alloy's solution to a test case? 
this of course depends on the platform. 

- activate alloy from wpca and display the result in a way that is meaningful to the author of the program.

 (_, Just hout, _, _) <- createProcess (proc "ls" []){ std_out = CreatePipe }
hGetContents hout

Done

- support analysis functions and relations: if a name is not a state variable and it is not a constant (that is, it does not appear in an equality expression with a state variable) then we assume that it is a modeling variable.
- put parenthesis around expressions 
- move project to github
- read from file
- create configuration file to guide translation?
- need to control: scope, sat solver, platform, name of analysis file, should analysis file be kept or deleted, 
- given platform need to control:
-  name of file,procedure,class,method, package and so on

